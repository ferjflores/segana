<?php

function grafico_lineal($variables, $tipo = NULL, $combinado = NULL, $ejeX = 'tiempo', $cm2 = FALSE) {
  if ($ejeX == 'tiempo'){

    // obtener el top n por $tipo
    $query = db_select('node', 'n');
    $query->join('field_data_field_fecha', 'ff', 'n.nid = ff.entity_id AND ff.bundle = :bundle', array(':bundle' => 'nota'));

    $query = query_area($query, $variables, $tipo);
    $query = query_discursivo($query, $variables, $tipo);
    $query = query_tendencia_nota($query, $variables, $tipo);
    $query = query_usuario($query, $variables, $tipo);
    $query = query_medio($query, $variables, $tipo);
    $query = query_palabra_clave($query, $variables);


    // si cm2 es verdadero no se contaran nodos(notas) sino que se contara(sumatoria) los cm2 por elemento
    if ($cm2 === FALSE) {
      $query->addExpression('COUNT(n.nid)', 'nid_count');
    }
    else {
      $query->join('field_data_field_centimetros_primera_pagina', 'fcpp', 'n.nid = fcpp.entity_id AND fcpp.bundle = :bundle', array(':bundle' => 'nota'));
      $query->addExpression('SUM(fcpp.field_centimetros_primera_pagina_value)', 'nid_count');
    }
    $query
      ->fields('ttd', array('tid'))
      ->condition('ff.entity_type', 'node')
      ->groupBy('ttd.tid')
      ->range(0, $variables['cantidad_lineal']);


    if ($variables['fecha_hasta']) {
      $query->condition('ff.field_fecha_value', $variables['fecha_desde'], '>=')
        ->condition('ff.field_fecha_value', $variables['fecha_hasta'], '<=');
    }
    else {
      $query->condition('ff.field_fecha_value', $variables['fecha_desde'], '=');
    }

    // si tipo_informacion no es todos
    if($variables['tipo_informacion']){
      $query->join('field_data_field_tipo_informacion', 'fti', 'n.nid = fti.entity_id');
      $query->condition('fti.field_tipo_informacion_tid', $variables['tipo_informacion']);
    }

    $query->orderBy('nid_count', 'DESC');
    $query_tipo = $query;





    $query = db_select('node', 'n');
    $query->join('field_data_field_fecha', 'ff', 'n.nid = ff.entity_id');
    $query = query_area($query, $variables, $tipo);
    $query = query_discursivo($query, $variables, $tipo);
    $query = query_tendencia_nota($query, $variables, $tipo);
    $query = query_usuario($query, $variables, $tipo);
    $query = query_medio($query, $variables, $tipo);
    $query = query_palabra_clave($query, $variables);

    if ($tipo) {
      $query->addJoin('INNER', $query_tipo, 'top_tipo', 'top_tipo.tid = ttd.tid');
    }


    // si cm2 es verdadero no se contaran nodos(notas) sino que se contara(sumatoria) los cm2 por elemento
    if ($cm2 === FALSE) {
      $query->addExpression('COUNT(n.nid)', 'nid_count');
    }
    else {
      $query->join('field_data_field_centimetros_primera_pagina', 'fcpp', 'n.nid = fcpp.entity_id AND fcpp.bundle = :bundle', array(':bundle' => 'nota'));
      $query->addExpression('SUM(fcpp.field_centimetros_primera_pagina_value)', 'nid_count');
    }

    $query
      ->condition('ff.entity_type', 'node')
      ->condition('ff.field_fecha_value', $variables['fecha_desde'], '>=')
      ->condition('ff.field_fecha_value', $variables['fecha_hasta'], '<=')
      ->fields('ff', array('field_fecha_value'))
      ->groupBy('fecha')
      ->orderBy('fecha', 'ASC');

    if ( ($variables['fecha_hasta'] - $variables['fecha_desde']) >= (5 * 30 * 24 * 3600) ) {
      $query->addExpression("UNIX_TIMESTAMP(CONCAT(FROM_UNIXTIME(ff.field_fecha_value, '%Y%m'), '01'))", 'fecha');
      $tooltip = array('day' => '%B %Y');
    }
    elseif ( ($variables['fecha_hasta'] - $variables['fecha_desde']) < (5 * 30 * 24 * 3600) && ($variables['fecha_hasta'] - $variables['fecha_desde']) > (2 * 30 * 24 * 3600) ) {
      //seleccionar el primer dia de la semana de la fecha correspondiente, para agrupar por semana y graficar agrupado por esta.
      $query->addExpression("UNIX_TIMESTAMP(STR_TO_DATE(CONCAT(FROM_UNIXTIME(ff.field_fecha_value, '%Y%u'), ' Monday'), '%x%v %W'))", 'fecha');
      $tooltip = array('week' => "Semana del %A, %b %e, %Y");
    }
    else {
      $query->addField('ff', 'field_fecha_value', 'fecha');
    }


    // si tipo_informacion no es todos
    if($variables['tipo_informacion']){
      $query->join('field_data_field_tipo_informacion', 'fti', 'n.nid = fti.entity_id');
      $query->condition('fti.field_tipo_informacion_tid', $variables['tipo_informacion']);
    }



    // agrupar por tipo
    if ($tipo) {
      $query
        ->fields('ttd', array('name'))
        ->groupBy('ttd.name');
    }
    $resultado = $query->execute();
    $serie = array();
    foreach ($resultado as $row) {

      if ($tipo) {
        if (isset($combinado)) {
          $serie_combinado[$row->fecha] = $row->nid_count + (isset($serie_combinado[$row->fecha]) ? $serie_combinado[$row->fecha] : NULL);
          $serie_barra[$row->name][] = array((intval($row->fecha) * 1000 ) - (4.5*3600*1000), intval($row->nid_count));
          $serie_torta[$row->name] = $row->nid_count + (isset($serie_torta[$row->name]) ? $serie_torta[$row->name] : NULL);
        }
        else {
          $serie[$row->name][] = array((intval($row->fecha) * 1000 ) - (4.5*3600*1000), intval($row->nid_count));
          $top_tipo[$row->name] = (isset($top_tipo[$row->name]) ? $top_tipo[$row->name] : NULL) + $row->nid_count;
        }

      }
      else {
        $serie[] = array((intval($row->fecha) * 1000 ) - (4.5*3600*1000), intval($row->nid_count));
      }
    }

    if ($combinado) {
      $serie = array();
      foreach ($serie_combinado as $fecha => $nid_count) {
        $serie[] = array(intval(($fecha * 1000) - (4.5*3600*1000) ), intval($nid_count));
      }
      $serieX = array();
      $serieY = array();
      foreach ($serie_torta as $name => $nid_count) {
        $serieX[] = $nid_count;
        $serieY[] = $name;
      }
    }

    $chart = array(
      '#type' => 'chart',
      //'#chart_type' => 'column',
      '#title' => t("Comportamiento en el período del ". date('d-m-Y',$variables['fecha_desde']) . " hasta el " . date('d-m-Y',$variables['fecha_hasta'])),
      '#title_font_style' => 'bold',
      '#title_color' => '#8797A0',
      '#title_font_weight' => 'bold',
      '#font' => 'ubuntu',
      '#title_font_size' => 18 * $variables['font'],
      '#dateTimeLabelFormats' => isset($tooltip) ? $tooltip : NULL,
      '#zoomType' => 'x',
      '#width' => 1054,
      '#colors' => ($tipo != 'tendencia_nota') ? $variables['paleta_colores'] : array('red','blue'),
      '#legend' => ($variables['leyenda_lineal']) ? TRUE : FALSE,
      '#legend_position' => $variables['leyenda_lineal'],
      '#legend_itemStyle' => array(
        'fontSize' => 14 * $variables['font'] .'px',
        'fontWight' => 'normal',
        'letter-spacing' => '-0.5px',
        'fontWeight' => 'normal',
      ),
      '#legend_useHTML' => TRUE,
    );



    if ($tipo) {
      ///Subtitulo
      // corregir accento del area
      $tipo = $tipo == 'area' ? 'área' : $tipo;

      ///plural de tipos
      switch ($tipo) {
        case 'matriz':
          $plural_tipo = 'matrices';
          break;
        case 'actor':
          $plural_tipo = 'actores';
          break;
        default:
          $plural_tipo = $tipo ."s";
          break;
      }
      $chart['#subtitle'] = ($tipo != 'tendencia_nota') ? t("Principales $plural_tipo") : 'Tendencias';
      $chart['#subtitle_color'] = '#8797A0';
      $chart['#subtitle_font_weight'] = 'normal';
      $chart['#subtitle_font_size'] = 13 * $variables['font'];
    }




    if (($tipo) && !isset($combinado)) {

      $chart['#tooltips_shared'] = TRUE;

      // ordernar por cantidad de notas
      arsort($top_tipo, SORT_NUMERIC);

      // seleccionar los tres primeros
      //$top_tipo = array_slice($top_tipo, 0, 3, TRUE);
      if ($tipo == 'tendencia_nota'){
        //ToDo fijar los colores por la interfaz gráfica y no forzar el orden para que cuadre
        $top_tipo = array('Positivo' => $top_tipo['Positivo'], 'Negativo' => $top_tipo['Negativo']);
      }

      foreach ($top_tipo as $tipo_name => $value) {
        $chart[$tipo_name] = array(
          '#type' => 'chart_data',
          '#chart_type' => 'spline',
          '#data' => $serie[$tipo_name],
          '#title' => t($tipo_name),
          '#target_axis' => 'yaxis',
        );
      }
      $chart['#plotOptions'] = array(
        'series' => array(
          'stickyTracking' => FALSE,
        ),
        /*'spline' => array(
            'tooltip' => array(
                'dateTimeLabelFormats' => array('week' => "Semana del %A, %b %e, %Y"),
                'shared' => TRUE,
            ),
        ),*/
      );
    }
    else {
      if ($tipo == 'tendencia_nota'){
        //ToDo fijar los colores por la interfaz gráfica y no forzar el orden para que cuadre
        $serie_barra = array('Positivo' => $serie_barra['Positivo'], 'Negativo' => $serie_barra['Negativo']);


        $serieYX = array($serieY[0] => $serieX[0], $serieY[1] => $serieX[1]);
        //reodernar
        $serieYX = array('Positivo' => $serieYX['Positivo'], 'Negativo' => $serieYX['Negativo']);

        $serieY = array_keys($serieYX);
        $serieX = array_values($serieYX);


      }
      $chart['line'] = array(
        '#type' => 'chart_data',
        '#chart_type' => 'spline',
        '#data' => $serie,
        '#target_axis' => 'yaxis',
        '#color' => $variables['paleta_colores'][7],
        '#marker_lineWidth' => 2,
        '#marker_fillColor' => 'white',
        '#marker_radius' => 4,
        '#marker_lineColor' => $variables['paleta_colores'][7],
      );

      if ($cm2 === FALSE) {
        $chart['line']['#title'] = (isset($combinado) ? t('Total notas') : t('Número de Notas'));
      }
      else {
        $chart['line']['#title'] = (isset($combinado) ? 'Total cm<sup>2</sup>' : 'cm<sup>2</sup>');
      }

      if (isset($combinado)) {
        foreach ($serie_barra as $title => $values) {
          $chart[$title] = array(
            '#type' => 'chart_data',
            '#chart_type' => 'column',
            '#title' => t($title),
            '#data' => $values,
            //'#width' => '250px',
            //'#showInLegend' => FALSE,
            //'#labels' => array($key),
            '#target_axis' => 'yaxis',
          );
          $chart['pie'] = array(
            '#type' => 'chart_data',
            '#chart_type' => 'pie',
            '#title' => t('Número de notas'),
            '#labels' => $serieY,
            '#data' => $serieX,
            '#show_in_legend' => FALSE,
            '#zIndex' => -10,
            '#center' => array(60, 0),
            '#size' => 120,

          );
          $chart['#plotOptions'] = array(
            'pie' => array(
              /*'borderWidth' => 0,*/
              'cursor' => 'pointer',
              'dataLabels' => array(
                'distance' => -25,
                'color' => 'white',
                'style' => array('fontSize' => 12 * $variables['font']),
                'connectorWidth' => 0,
                'inside' => TRUE,
                'padding' => 0,
                'y' => 0,
                'x' => 0,
                'format' => '{percentage:.1f}%',
              ),
              'allowPointSelect' => TRUE,
            ),
          );


        }

      }
    }


    // formato para dia en el eje x
    if ( ($variables['fecha_hasta'] - $variables['fecha_desde']) <= (10 * 24 * 3600) ) {
      $day_format = "%A %e %b";
    }
    else {
      $day_format = "%e %b";
    }


    $chart['xaxis'] = array(
      '#type' => 'chart_xaxis',
      '#axis_type' => 'datetime',
      '#dateTimeLabelFormats' => array('day' => $day_format, 'hour' => ' ', ),
      '#labels_step' => 1,
      '#maxPadding' => 0.05,
      '#labels_style' => array(
        'fontSize' => 14 * $variables['font'] . 'px',
        'letter-spacing' => '-0.5px',
        'fontWeight' => 'normal',
      ),
    );

    $chart['yaxis'] = array(
      '#type' => 'chart_yaxis',
      '#axis_type' => 'linear',
      '#labels_color' => 'black',
      '#title_font_size' => 17 * $variables['font'],
      '#title_color' => '#8797A0',
      '#min' => 0,
      '#allowDecimals' => FALSE,
      '#labels_style' => array(
        'fontSize' => 13 * $variables['font'] . 'px',
        'letter-spacing' => '-0.5px',
        'fontWeight' => 'normal',
      ),
    );

    if ($cm2 === FALSE){
      $chart['yaxis']['#title'] =  t('Notas');
    }
    else {
      $chart['yaxis']['#title'] = 'cm<sup>2</sup>';
    }
  }
  /*	if ($tipo) {

          foreach ($top_tipo as $key => $value) {
              $a .= $key ." ". $value ."</br>";
          }
          return $a;
      }
      else {*/
  return drupal_render($chart);
  //}
}


function grafico_simple($variables, $tipo, $cm2 = FALSE) {

  $rango = ($variables['otros']) ? NULL : $variables['cantidad_simple'];
  $query = query_por_tipo($variables, $tipo, $rango, $cm2);
  $resultado = $query->execute();

  if ($tipo == 'area' && $cm2){
    ed(gqs($query));
  }
  $serieY = array();
  $serieX = array();
  $serie = array();
  $contador = 0;

  switch ($tipo) {
    case 'area':
      $otros = 'Otras áreas';
      break;
    case 'matriz':
      $otros = 'Otras matrices';
      break;
    case 'actor':
      $otros = 'Otros actores';
      break;
    default:
      $otros = 'Otros ' . $tipo . 's';
      break;
  }

  foreach ($resultado as $row) {
    if ( ($variables['otros']) && $contador > ($variables['cantidad_simple'] - 2)) {
      $indice_otros = ($variables['cantidad_simple'] -1);
      $serieX[$indice_otros] = intval((isset($serieX[$indice_otros]) ? $serieX[$indice_otros] : NULL) + $row->nid_count);
      $serieY[$indice_otros] = $otros;
      $serie[$otros] = intval((isset($serie[$otros]) ? $serie[$otros] : NULL) + intval($row->nid_count));
    }
    else {
      $serieX[] = intval($row->nid_count);
      $serieY[] = $row->name;
      $serie[$row->name] = intval($row->nid_count);
    }
    $contador++;

  }

  if ($tipo == 'area' && $cm2){
    ed($serie);
  }

  //subtitulo
  $tipos = tipos();
  $tipos[] = 'medio';
  $tipos[] = 'tendencia_nota';

  $subtitulo = NULL;
  foreach ($tipos as $value) {
    if (isset($variables[$value])) {
      $subtitulo .= '<b>' . mb_ucfirst($value) . ':</b> ';
      unset($elementos);
      $elementos = NULL;
      foreach ($variables[$value] as $value2) {
        $term = taxonomy_term_load($value2);
        $name = $term->name;
        $elementos .= $name .", ";
      }
      $value = $value == 'area' ? 'área' : $value;
      $elementos = substr($elementos, 0, -2);
      $subtitulo .= $elementos . '    ';
    }
  }

  if ($tipo == 'tendencia_nota') {
    foreach ($serieY as $key => $value) {
      if ($value == 'Positivo'){
        $paleta_tendencia_nota[$key] = 'red';
      }
      else {
        $paleta_tendencia_nota[$key] = 'blue';
      }
    }
  }


  // corregir accento del area y nombre tendencia
  switch($tipo) {
    case 'area':
      $tipo_corregido = 'área';
      break;
    case 'tendencia_nota':
      $tipo_corregido = 'tendencia de la nota';
      break;
    default:
      $tipo_corregido = $tipo;
      break;
  }

  $torta = array(
    '#type' => 'chart',
    '#chart_library' => 'highcharts',
    '#data_labels' => TRUE,
    '#tooltips' => TRUE,
    '#colors' => ($tipo != 'tendencia_nota') ? $variables['paleta_colores'] : $paleta_tendencia_nota,
    '#title_font_style' => 'bold',
    '#title_color' => '#8797A0',
    '#title_font_weight' => 'bold',
    '#font' => 'ubuntu',
    '#title_font_size' => 18 * $variables['font'],
    '#width' => 400,
    '#height' => 450,
    '#subtitle' => isset($subtitulo) ? $subtitulo : NULL,
    '#subtitle_color' => '#8797A0',
    '#subtitle_font_weight' => 'normal',
    '#subtitle_font_size' => 11 * $variables['font'],
    '#legend' => ($variables['leyenda']) ? TRUE : FALSE,
    '#legend_position' => 'bottom',
    '#legend_width' => 400,
    '#legend_itemWidth' => ($variables['leyenda']) ? 400 / $variables['leyenda'] : 400,
    '#legend_itemStyle' => array(
      'width' => (($variables['leyenda']) ? (400 / $variables['leyenda']) - 6 : 400) - 14,
      'letter-spacing' => '-0.5px',
      'lineHeight' => (15 * $variables['font']) . 'px',
      'fontWeight' => 'normal',
      'fontSize' => (13 * $variables['font']) .'px',
    ),
    '#legend_symbolRadius' => 5,
    '#legend_symbolHeight' => 10,
    '#legend_symbolWidth' => 10,
    '#legend_symbolPadding' => 4,
    '#legend_itemMarginBottom' => 0,
    '#legend_itemMarginTop' => 0,
    '#legend_padding' => 2,
    '#legend_useHTML' => TRUE,
  );

  if ($cm2 === FALSE ) {
    $torta['#title'] = t('Porcentaje de notas por ' . $tipo_corregido);
  }
  else {
    $torta['#title'] = t('Porcentaje de cm<sup>2</sup> de primera página por ' . $tipo_corregido);
    $torta['#title_useHTML'] = TRUE;
    $torta['#title_font_size'] = (18 * $variables['font']) . 'px';
  }

  $torta['pie'] = array(
    '#type' => 'chart_data',
    '#chart_type' => 'pie',
    '#title' => t('Número de notas'),
    '#labels' => $serieY,
    '#data' => $serieX,
  );
  $torta['#plotOptions'] = array(
    'series' => array(
      'dataLabels' => array(
        'enabled' => TRUE,
      ),
    ),
    'pie' => array(
      'borderWidth' => 0,
      'cursor' => 'pointer',
      'dataLabels' => array(
        'distance' => (($variables['conectores']) ? 20 : 38),
        'color' => '#424a52',
        'style' => array('fontWeight' => 'bold', 'fontSize' => 16 * $variables['font']),
        'connectorPadding' => (($variables['conectores']) ? 0 : -30),
        'connectorWidth' => (($variables['conectores']) ? 1 : 0),
        'inside' => TRUE,
        'padding' => 0,
        'y' => 0,
        'x' => 0,
        'format' => '{percentage:.1f}%',
      ),
      'allowPointSelect' => TRUE,
    ),
  );


  $columnas = array(
    '#type' => 'chart',
    '#chart_library' => 'highcharts',
    '#data_labels' => TRUE,
    '#tooltips' => FALSE,
    '#colors' => ($tipo != 'tendencia_nota') ? $variables['paleta_colores'] : $paleta_tendencia_nota,
    '#title_font_style' => 'bold',
    '#title_color' => '#8797A0',
    '#title_font_weight' => 'bold',
    '#font' => 'ubuntu',
    '#title_font_size' => 18 * $variables['font'],
    '#legend' => FALSE,
    '#width' => 753,
    '#height' => 450,
    '#subtitle' => isset($subtitulo) ? $subtitulo : NULL,
    '#subtitle_color' => '#8797A0',
    '#subtitle_font_weight' => 'normal',
    '#subtitle_font_size' => 11 * $variables['font'],
  );

  if ($cm2 === FALSE) {
    $columnas['#title'] = t('Número de notas por ' . $tipo_corregido );
  }
  else {
    $columnas['#title'] = t('Cm<sup>2</sup> de primera página por ' . $tipo_corregido );
    $columnas['#title_useHTML'] = TRUE;
    $columnas['#title_font_size'] = (18 * $variables['font']) . 'px';
  }


  $columnas['barras_columnas'] = array(
    '#type' => 'chart_data',
    '#chart_type' => $variables['tipo-simple'],
    '#title' => t('Número de notas'),
    '#data' => $serieX,
    '#width' => '250px',
    '#showInLegend' => FALSE,
    '#labels' => $serieY,
    '#target_axis' => 'yaxis',
  );
  $columnas['#plotOptions'] = array(
    'series' => array(
      'dataLabels' => array(
        'enabled' => TRUE,
        'style' => array('fontWeight' => 'bold', 'fontSize' => 15 * $variables['font']),
        //'distance' => 50,
        'inside' => FALSE,
      ),
      'stacking' => 'normal',
      'colorByPoint' => TRUE,

    ),
    'column' => array(
      'grouping' => FALSE,
      'inside' => FALSE,
    ),
  );
  $columnas['xaxis'] = array(
    '#type' => 'chart_xaxis',
    '#labels' => $serieY,
    '#labels_step' => 0,
    '#maxStaggerLines' => 1,
    '#labels_style' => array(
      'letter-spacing' => '-0.5px',
      'fontSize' => 13 * $variables['font'],
      'fontWeight' => 'normal',
      'color' => 'black',
    ),
    '#title_color' => '#8797A0',
    '#title_font_size' => 17 * $variables['font'],


  );
  $columnas['yaxis'] = array(
    '#type' => 'chart_yaxis',
    '#axis_type' => 'linear',
    '#labels_color' => 'black',
    '#title_color' => 'black',
    '#min' => 0,
    '#title_font_size' => 17 * $variables['font'],
    '#title_color' => '#8797A0',
    '#allowDecimals' => FALSE,
    '#labels_style' => array(
      'fontSize' => 13 * $variables['font'] .'px',
      'color' => 'black',
      'fontWeight' => 'normal',
      'letter-spacing' => '-0.5px',
    ),
  );
  if ($cm2 === FALSE) {
    $columnas['yaxis']['#title'] = t('Notas');
  }
  else {
    $columnas['yaxis']['#title'] = 'cm<sup>2</sup>';
    $columnas['yaxis']['#title_useHTML'] = TRUE;
  }

  if (count($serieX) == 0) {
    $torta['NoData'] = $columnas['NoData'] = TRUE;
  }

  $tabs['items'] = array(drupal_render($torta), drupal_render($columnas));
  $tabs['type'] = 'ul';

  return theme('item_list', $tabs);

}


function graficos_barras($variables, $tipo, $tipo2, $cm2 = FALSE) {

  // obtener el top n por $tipo
  $query = db_select('node', 'n');
  $query->join('field_data_field_fecha', 'ff', 'n.nid = ff.entity_id');

  $query = query_area($query, $variables, $tipo);
  $query = query_discursivo($query, $variables, $tipo);
  $query = query_tendencia_nota($query, $variables, $tipo);
  $query = query_usuario($query, $variables, $tipo);
  $query = query_medio($query, $variables, $tipo);
  $query = query_palabra_clave($query, $variables);


  // si cm2 es verdadero no se contaran nodos(notas) sino que se contara(sumatoria) los cm2 por elemento
  if ($cm2 === FALSE) {
    $query->addExpression('COUNT(n.nid)', 'nid_count');
  }
  else {
    $query->join('field_data_field_centimetros_primera_pagina', 'fcpp', 'n.nid = fcpp.entity_id AND fcpp.bundle = :bundle', array(':bundle' => 'nota'));
    $query->addExpression('SUM(fcpp.field_centimetros_primera_pagina_value)', 'nid_count');
  }

  $query
    ->fields('ttd', array('tid'))
    ->condition('ff.entity_type', 'node')
    ->groupBy('ttd.tid')
    ->range(0,$variables['cantidad_combinado']);


  if ($variables['fecha_hasta']) {
    $query->condition('ff.field_fecha_value', $variables['fecha_desde'], '>=')
      ->condition('ff.field_fecha_value', $variables['fecha_hasta'], '<=');
  }
  else {
    $query->condition('ff.field_fecha_value', $variables['fecha_desde'], '=');
  }

  // si tipo_informacion no es todos
  if($variables['tipo_informacion']){
    $query->join('field_data_field_tipo_informacion', 'fti', 'n.nid = fti.entity_id');
    $query->condition('fti.field_tipo_informacion_tid', $variables['tipo_informacion']);
  }

  $query->orderBy('nid_count', 'DESC');
  $query_tipo = $query;




  // obtener el top n por $tipo2
  $query = db_select('node', 'n');
  $query->join('field_data_field_fecha', 'ff', 'n.nid = ff.entity_id');

  $query = query_area($query, $variables, $tipo2);
  $query = query_discursivo($query, $variables, $tipo2);
  $query = query_tendencia_nota($query, $variables, $tipo2);
  $query = query_usuario($query, $variables, $tipo2);
  $query = query_medio($query, $variables, $tipo2);
  $query = query_palabra_clave($query, $variables);


  // si cm2 es verdadero no se contaran nodos(notas) sino que se contara(sumatoria) los cm2 por elemento
  if ($cm2 === FALSE) {
    $query->addExpression('COUNT(n.nid)', 'nid_count');
  }
  else {
    $query->join('field_data_field_centimetros_primera_pagina', 'fcpp', 'n.nid = fcpp.entity_id AND fcpp.bundle = :bundle', array(':bundle' => 'nota'));
    $query->addExpression('SUM(fcpp.field_centimetros_primera_pagina_value)', 'nid_count');
  }

  $query
    ->fields('ttd', array('tid'))
    ->condition('ff.entity_type', 'node')
    ->groupBy('ttd.tid')
    ->range(0,$variables['cantidad_combinado']);


  if ($variables['fecha_hasta']) {
    $query->condition('ff.field_fecha_value', $variables['fecha_desde'], '>=')
      ->condition('ff.field_fecha_value', $variables['fecha_hasta'], '<=');
  }
  else {
    $query->condition('ff.field_fecha_value', $variables['fecha_desde'], '=');
  }

  // si tipo_informacion no es todos
  if($variables['tipo_informacion']){
    $query->join('field_data_field_tipo_informacion', 'fti', 'n.nid = fti.entity_id');
    $query->condition('fti.field_tipo_informacion_tid', $variables['tipo_informacion']);
  }

  $query->orderBy('nid_count', 'DESC');
  $query_tipo2 = $query;



  $query = db_select('node', 'n');
  $query->join('field_data_field_fecha', 'ff', 'n.nid = ff.entity_id');

  $query = query_area($query, $variables, $tipo);
  $query = query_discursivo($query, $variables, $tipo);
  $query = query_tendencia_nota($query, $variables, $tipo);
  $query = query_usuario($query, $variables, $tipo);
  $query = query_medio($query, $variables, $tipo);
  $query = query_palabra_clave($query, $variables);

  // si los campos a comparar tienen una relación muchos a uno con la nota se debe asegurar que no se mezclen estos campos,
  // haciendo el delta del tema igual al campo se garantiza esto.
  $discursivos = array('actor', 'tema', 'matriz');
  if (!in_array($tipo, $discursivos) || !in_array($tipo2, $discursivos)) {
    $query->join('field_data_field_' . $tipo2, 'tipo2', 'n.nid = tipo2.entity_id');
  }
  else {
    $query->join('field_data_field_' . $tipo2, 'tipo2', 'n.nid = tipo2.entity_id AND fm.delta = tipo2.delta');
  }

  $query->join('taxonomy_term_data', 'ttd2', 'tipo2.field_' . $tipo2 . '_tid = ttd2.tid');

  $query->addJoin('INNER', $query_tipo, 'top_tipo', 'top_tipo.tid = ttd.tid');
  $query->addJoin('INNER', $query_tipo2, 'top_tipo2', 'top_tipo2.tid = ttd2.tid');


  // si cm2 es verdadero no se contaran nodos(notas) sino que se contara(sumatoria) los cm2 por elemento
  if ($cm2 === FALSE) {
    $query->addExpression('COUNT(n.nid)', 'nid_count');
  }
  else {
    $query->join('field_data_field_centimetros_primera_pagina', 'fcpp', 'n.nid = fcpp.entity_id AND fcpp.bundle = :bundle', array(':bundle' => 'nota'));
    $query->addExpression('SUM(fcpp.field_centimetros_primera_pagina_value)', 'nid_count');
  }

  $query
    ->condition('ff.entity_type', 'node')
    ->groupBy('ttd.tid')
    ->groupBy('ttd2.tid');

  $query->addField('ttd', 'name', 'name');
  $query->addField('ttd2','name', 'name2');


  if ($variables['fecha_hasta']) {
    $query->condition('ff.field_fecha_value', $variables['fecha_desde'], '>=')
      ->condition('ff.field_fecha_value', $variables['fecha_hasta'], '<=');
  }
  else {
    $query->condition('ff.field_fecha_value', $variables['fecha_desde'], '=');
  }

  // si tipo_informacion no es todos
  if($variables['tipo_informacion']){
    $query->join('field_data_field_tipo_informacion', 'fti', 'n.nid = fti.entity_id');
    $query->condition('fti.field_tipo_informacion_tid', $variables['tipo_informacion']);
  }

  $query->orderBy('ttd.name', 'ASC');
  $query->orderBy('ttd2.name', 'ASC');


  $resultado = $query->execute();

  foreach ($resultado as $row) {
    $serie[$row->name2][$row->name] = (int)$row->nid_count;
    $lista_tipo[$row->name] = $row->nid_count + (isset($lista_tipo[$row->name]) ? $lista_tipo[$row->name] : NULL);
  }


  // corregir accento del area
  $tipo = $tipo == 'area' ? 'área' : $tipo;
  ///plural de tipos
  switch ($tipo2) {
    case 'matriz':
      if ($cm2 === FALSE) {
        $titulo = "Número de notas de las principales matrices por $tipo";
      }
      else {
        $titulo = "cm<sup>2</sup> de las principales matrices por $tipo";
      }
      break;
    case 'actor':
      if ($cm2 === FALSE) {
        $titulo = "Número de notas de los principales actores por $tipo";
      }
      else {
        $titulo = "cm<sup>2</sup> de los principales actores por $tipo";
      }
      break;
    case 'tendencia_nota':
      if ($cm2 === FALSE) {
        $titulo = "Número de notas de las tendencias por $tipo";
      }
      else {
        $titulo = "cm<sup>2</sup> de las tendencias por $tipo";
      }
      break;
    default:
      if ($cm2 === FALSE) {
        $titulo = "Número de notas de las principales " . $tipo2 . "s por " . $tipo;
      }
      else {
        $titulo = "cm<sup>2</sup> de las principales " . $tipo2 . "s por " . $tipo;
      }
      break;
  }


  ///plural de tipos
  switch ($tipo2) {
    case 'matriz':
      $plural_tipo2 = 'matrices';
      break;
    case 'actor':
      $plural_tipo2 = 'actores';
      break;
    default:
      $plural_tipo2 = $tipo2 ."s";
      break;
  }
  switch ($tipo) {
    case 'matriz':
      $plural_tipo = 'matrices';
      break;
    case 'actor':
      $plural_tipo = 'actores';
      break;
    default:
      $plural_tipo = $tipo ."s";
      break;
  }

  if ($tipo2 == 'tendencia_nota') {
    foreach (array_keys($serie) as $key => $value) {
      if ($value == 'Positivo'){
        $paleta_tendencia_nota[$key] = 'red';
      }
      else {
        $paleta_tendencia_nota[$key] = 'blue';
      }
    }
  }

  $columnas = array(
    '#type' => 'chart',
    '#title' => t($titulo),
    '#chart_library' => 'highcharts',
    //'#data_labels' => TRUE,
    '#tooltips' => TRUE,
    '#colors' => ($tipo2 != 'tendencia_nota') ? $variables['paleta_colores'] : $paleta_tendencia_nota,
    '#title_font_style' => 'bold',
    '#title_color' => '#6B7A84',
    '#title_font_weight' => 'bold',
    '#font' => 'ubuntu',
    '#title_font_size' => 18 * $variables['font'],
    '#legend' => TRUE,
    '#width' => 1153,
    '#height' => 450,
    '#legend_title' => mb_ucfirst($plural_tipo2),
    '#legend_title_font_size' => 15 * $variables['font'],
    '#legend_title_font_weight' => 'normal',
    '#legend_title_color' => '#8797A0',
    '#legend_itemMarginBottom' => 3,
    '#legend_itemStyle' => array(
      'fontSize' => 14 * $variables['font'],
      'fontWight' => 'normal',
      'letter-spacing' => '-0.5px',
      'fontWeight' => 'normal',
    ),
  );
  if ($cm2 !== FALSE) {
    $columnas['#title_useHTML'] = TRUE;
    $columnas['#title_font_size'] = (18 * $variables['font']) . 'px';
  }


  // ordernar por cantidad de notas
  arsort($lista_tipo, SORT_NUMERIC);
  $lista_tipo = array_keys($lista_tipo);



  foreach ($serie as $tipo2 => $value) {
    $data = array();
    foreach ($lista_tipo as $tipo) {
      $data[] = !empty($value[$tipo]) ? $value[$tipo] : NULL;
    }
    $columnas[$tipo2] = array(
      '#type' => 'chart_data',
      '#chart_type' => $variables['tipo-combinado'],
      '#title' => t($tipo2),
      '#data' => $data,
      '#width' => '250px',
      //'#showInLegend' => FALSE,
      //'#labels' => array($key),
      '#target_axis' => 'yaxis',
    );
  }
  $columnas['#plotOptions'] = array(
    'series' => array(
      'dataLabels' => array(
        'enabled' => FALSE,
        'style' => array('fontWeight' => 'normal', 'fontSize' => 12 * $variables['font']),
        //'distance' => 50,
        'inside' => FALSE,
      ),
      'stacking' => $variables['apiladas'] ? 'normal' : NULL,
      'groupPadding' => 0.05,
      'pointPadding' => 0.04,
      'minPointLength' => 3,
    ),
    $variables['tipo-combinado'] => array(
      'borderWidth' => 0,
    ),
  );
  $columnas['xaxis'] = array(
    '#type' => 'chart_xaxis',
    '#labels' => $lista_tipo,
    '#labels_style' => array(
      'fontSize' => 13 * $variables['font'],
      'color' => 'black',
      'fontWeight' => 'normal',
      'letter-spacing' => '-0.5px',
    ),
    '#labels_step' => 0,
    '#maxStaggerLines' => 1,
    '#title' => t(mb_ucfirst($plural_tipo)),
    '#title_color' => '#8797A0',
    '#title_font_size' => 16 * $variables['font'],

  );

  $columnas['yaxis'] = array(
    '#type' => 'chart_yaxis',
    '#axis_type' => 'linear',
    '#min' => 0,
    '#title_font_size' => 16 * $variables['font'],
    '#title_color' => '#8797A0',
    '#allowDecimals' => FALSE,
    '#labels_style' => array(
      'fontSize' => 13 * $variables['font'] .'px',
      'color' => 'black',
      'fontWeight' => 'normal',
      'letter-spacing' => '-0.5px',
    ),
  );
  if ($cm2 === FALSE) {
    $columnas['yaxis']['#title'] = t('Notas');
  }
  else {
    $columnas['yaxis']['#title'] = "cm<sup>2</sup>";
    $columnas['yaxis']['#title_useHTML'] = TRUE;
  }


  return drupal_render($columnas);

}

function paleta() {
  $paleta = array('#5DA5DA', '#FAA43A', '#F15854', '#F17CB0', '#B2912F', '#B276B2', '#DECF3F', '#4D4D4D', '#60BD68','#307D99' );
  return $paleta;
}



function query_area(&$query, $variables, $tipo = NULL) {
  if ($variables['area'] || $tipo == 'area') {
    $query->join('field_data_field_area', 'fa', 'n.nid = fa.entity_id AND fa.bundle = :bundle', array(':bundle' => 'nota'));
    if ($tipo == 'area') {
      $query->join('taxonomy_term_data', 'ttd', 'fa.field_area_tid = ttd.tid');
    }
    if ($variables['area']) {
      $db_or_area = db_or();
      foreach ($variables['area'] as $area_tid) {
        $db_or_area->condition('fa.field_area_tid', $area_tid);
      }
      $query->condition($db_or_area);
    }
  }
  return $query;
}



function query_palabra_clave(&$query, $variables){
  if($variables['palabra_clave']) {
    $query->join('field_data_body', 'b', 'n.nid = b.entity_id');
    if ($variables['busqueda_exacta']) {
      $db_or_be = db_or();
      $db_or_be->condition('n.title', '% ' . db_like($variables['palabra_clave']) .' %', 'LIKE');
      $db_or_be->condition('b.body_value', '% ' . db_like($variables['palabra_clave']) .' %', 'LIKE');
      $db_or_be->condition('n.title', db_like($variables['palabra_clave']) .' %', 'LIKE');
      $db_or_be->condition('b.body_value', db_like($variables['palabra_clave']) .' %', 'LIKE');
      $db_or_be->condition('n.title', '% ' . db_like($variables['palabra_clave']), 'LIKE');
      $db_or_be->condition('b.body_value', '% ' . db_like($variables['palabra_clave']), 'LIKE');
      $query->condition($db_or_be);
    }
    elseif ($variables['cualquiera']) {
      $db_or_c = db_or();
      $palabras = preg_split('/\s+/', $variables['palabra_clave']);
      foreach ($palabras as $palabra) {
        $db_or_c->condition('n.title', '%' . db_like($palabra) . '%', 'LIKE');
        $db_or_c->condition('b.body_value', '%' . db_like($palabra) . '%', 'LIKE');
      }
      $query->condition($db_or_c);
    }
    else {
      $palabras = preg_split('/\s+/', $variables['palabra_clave']);
      //$db_and_pc = db_and();
      foreach ($palabras as $palabra) {
        $query->where( "CONCAT(n.title, ' ', b.body_value) LIKE :$palabra", array(":$palabra" => '%' . $palabra . '%') );
      }
    }
  }
  return $query;
}

function query_medio(&$query, $variables, $tipo = NULL) {
  if (isset($variables['medio']) || $tipo == 'medio' || $variables['tipo_localizacion'] != 0) {
    $query->join('field_data_field_medio', 'fme', 'n.nid = fme.entity_id  AND fme.bundle = :bundle', array(':bundle' => 'nota'));

    if ($variables['tipo_localizacion'] != 0) {
      if ($variables['tipo_localizacion'] != -1) {
        $query->join('field_data_field_localizacion', 'fl', 'fme.field_medio_tid = fl.entity_id');
        $query->join('field_data_field_tipo_localizacion', 'ftl', 'fl.field_localizacion_tid = ftl.entity_id');
        $query->condition('ftl.field_tipo_localizacion_tid', $variables['tipo_localizacion']);
      }
      else {
        $query->join('field_data_field_version_impresa', 'fvi', 'fme.field_medio_tid = fvi.entity_id');
        $query->condition('fvi.field_version_impresa_value', 1);

        if ($variables['primera_pagina']) {
          $query->join('field_data_field_tipo_carga', 'ftc', 'n.nid = ftc.entity_id');
          $query->join('taxonomy_term_data', 'ttd_tc', 'ftc.field_tipo_carga_tid = ttd_tc.tid');
          $query->condition('ttd_tc.name', 'Primera Página');
        }
      }
    }


    if (isset($variables['medio']) || $tipo == 'medio') {
      if ($tipo == 'medio') {
        $query->join('taxonomy_term_data', 'ttd', 'fme.field_medio_tid = ttd.tid');
      }
      if (isset($variables['medio'])) {
        $db_or_medio = db_or();
        foreach ($variables['medio'] as $medio_tid) {
          $db_or_medio->condition('fme.field_medio_tid', $medio_tid);
        }
        $query->condition($db_or_medio);
      }
    }
  }
  return $query;
}

function query_discursivo(&$query, $variables, $tipo = NULL){
  if ( ($variables['tema']) || ($variables['matriz']) || ($variables['actor']) || ($tipo == 'tema') || ($tipo == 'matriz') || ($tipo == 'actor') || ($variables['debate_publico']) ) {

    $query->join('field_data_field_tema', 'ft', 'n.nid = ft.entity_id AND ft.bundle = :bundle', array(':bundle' => 'nota'));
    $query->leftJoin('field_data_field_matriz', 'fm', 'n.nid = fm.entity_id AND ft.delta = fm.delta AND fm.bundle = :bundle', array(':bundle' => 'nota'));
    $query->leftJoin('field_data_field_actor', 'fac', 'n.nid = fac.entity_id AND ft.delta = fac.delta  AND fac.bundle = :bundle', array(':bundle' => 'nota'));

    switch ($tipo) {
      case 'tema':
        $query->join('taxonomy_term_data', 'ttd', 'ft.field_tema_tid = ttd.tid');
        break;
      case 'matriz':
        $query->join('taxonomy_term_data', 'ttd', 'fm.field_matriz_tid = ttd.tid');
        break;
      case 'actor':
        $query->join('taxonomy_term_data', 'ttd', 'fac.field_actor_tid = ttd.tid');
        break;
    }

    if ($variables['tema']) {
      $db_or_tema = db_or();
      foreach ($variables['tema'] as $tema_tid) {
        $db_or_tema->condition('ft.field_tema_tid', $tema_tid);
      }
      $query->condition($db_or_tema);
    }
    if ($variables['matriz']) {
      $db_or_matriz = db_or();
      foreach ($variables['matriz'] as $matriz_tid) {
        $db_or_matriz->condition('fm.field_matriz_tid', $matriz_tid);
      }
      $query->condition($db_or_matriz);
    }
    if ($variables['actor']) {
      $db_or_actor = db_or();
      foreach ($variables['actor'] as $actor_tid) {
        $db_or_actor->condition('fac.field_actor_tid', $actor_tid);
      }
      $query->condition($db_or_actor);
    }
    if ($variables['debate_publico']) {
      $query->leftJoin('field_data_field_debate_publico', 'fdp_tema', 'ft.field_tema_tid = fdp_tema.entity_id');
      $query->leftJoin('field_data_field_debate_publico', 'fdp_matriz', 'fm.field_matriz_tid = fdp_matriz.entity_id');
      $db_or = db_or();
      $db_or->condition('fdp_tema.field_debate_publico_value', 1);
      $db_or->condition('fdp_matriz.field_debate_publico_value', 1);
      $query->condition($db_or);
    }
  }
  return $query;
}

function query_usuario(&$query, $variables, $tipo = NULL){
  if ( ($variables['usuario']) || ($tipo == 'usuario') ) {
    $query->join('field_data_field_usuario', 'fu', 'n.nid = fu.entity_id  AND fu.bundle = :bundle', array(':bundle' => 'nota'));

    if ($tipo == 'usuario') {
      $query->join('taxonomy_term_data', 'ttd', 'fu.field_usuario_tid = ttd.tid');
    }
    if ($variables['usuario']) {
      $db_or_usuario = db_or();
      foreach ($variables['usuario'] as $usuario_tid) {
        $db_or_usuario->condition('fu.field_usuario_tid', $usuario_tid);
      }
      $query->condition($db_or_usuario);
    }
  }
  return $query;
}

function query_tendencia_nota(&$query, $variables, $tipo = NULL) {
  if ($variables['tendencia_nota'] || $tipo == 'tendencia_nota') {
    $query->join('field_data_field_tendencia_nota', 'fte', 'n.nid = fte.entity_id AND fte.bundle = :bundle', array(':bundle' => 'nota'));
    if ($tipo == 'tendencia_nota') {
      $query->join('taxonomy_term_data', 'ttd', 'fte.field_tendencia_nota_tid = ttd.tid');
    }
    if ($variables['tendencia_nota']) {
      $query->condition('fte.field_tendencia_nota_tid', $variables['tendencia_nota']);
    }
  }
  return $query;
}


function query_por_tipo($variables, $tipo, $rango = NULL, $cm2 = FALSE){
  $query = db_select('node', 'n');
  $query->join('field_data_field_fecha', 'ff', 'n.nid = ff.entity_id  AND ff.bundle = :bundle', array(':bundle' => 'nota'));

  $query = query_area($query, $variables, $tipo);
  $query = query_discursivo($query, $variables, $tipo);
  $query = query_medio($query, $variables, $tipo);
  $query = query_tendencia_nota($query, $variables, $tipo);
  $query = query_usuario($query, $variables, $tipo);
  $query = query_palabra_clave($query, $variables);

  // si cm2 es verdadero no se contaran nodos(notas) sino que se contara(sumatoria) los cm2 por elemento
  if ($cm2 === FALSE) {
    $query->addExpression('COUNT(n.nid)', 'nid_count');
  }
  else {
    $query->join('field_data_field_centimetros_primera_pagina', 'fcpp', 'n.nid = fcpp.entity_id AND fcpp.bundle = :bundle', array(':bundle' => 'nota'));
    $query->addExpression('SUM(fcpp.field_centimetros_primera_pagina_value)', 'nid_count');
  }
  $query
    ->fields('ttd', array('name', 'tid'))
    ->condition('ff.entity_type', 'node')
    ->groupBy('ttd.tid');
  if ($rango) {
    $query->range(0, $rango);
  }


  if ($variables['fecha_hasta']) {
    $query->condition('ff.field_fecha_value', $variables['fecha_desde'], '>=')
      ->condition('ff.field_fecha_value', $variables['fecha_hasta'], '<=');
  }
  else {
    $query->condition('ff.field_fecha_value', $variables['fecha_desde'], '=');
  }
  // si tipo_informacion no es todos
  if($variables['tipo_informacion']){
    $query->join('field_data_field_tipo_informacion', 'fti', 'n.nid = fti.entity_id');
    $query->condition('fti.field_tipo_informacion_tid', $variables['tipo_informacion']);
  }

  $query->orderBy('nid_count', 'DESC');
  return $query;

}

function query_total_por_tipo($variables, $tipo){
  $query = query_por_tipo($variables, $tipo);

  //reiniciar groupBy
  $groupBy =& $query->getGroupBy();
  unset($groupBy['ttd.tid']);

  //reiniciar limit
  $range =& $query->range();
  //unset($groupBy['ttd.tid']);
  unset($range);

  return $query;
}

?>
