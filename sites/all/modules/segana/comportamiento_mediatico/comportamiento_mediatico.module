<?php
function comportamiento_mediatico_menu() {
  $items = array();

  $items['comportamiento_mediatico'] = array(
    'title' => 'Comportamiento Mediático',
    'page callback' => 'comportamiento_mediatico',
    //'access callback' => TRUE,
    'access arguments' => array('access content'),
    'weight' => 0,
  );
  $items['comportamiento_mediatico/autocomplete_area'] = array(
    'page callback' => 'autocomplete_busqueda_area',
    'file' => 'busqueda_autocomplete.inc',
    'type' => MENU_CALLBACK,
    'access arguments' => array('access content'),
  );
  $items['comportamiento_mediatico/autocomplete_tema'] = array(
    'page callback' => 'autocomplete_busqueda_tema',
    'file' => 'busqueda_autocomplete.inc',
    'type' => MENU_CALLBACK,
    'access arguments' => array('access content'),
  );
  $items['comportamiento_mediatico/autocomplete_matriz'] = array(
    'page callback' => 'autocomplete_busqueda_matriz',
    'file' => 'busqueda_autocomplete.inc',
    'type' => MENU_CALLBACK,
    'access arguments' => array('access content'),
  );
  $items['comportamiento_mediatico/autocomplete_actor'] = array(
    'page callback' => 'autocomplete_busqueda_actor',
    'file' => 'busqueda_autocomplete.inc',
    'type' => MENU_CALLBACK,
    'access arguments' => array('access content'),
  );
  $items['comportamiento_mediatico/resultado/%'] = array(
    'title' => 'Data',
    'page callback' => 'comportamiento_mediatico_resultado',
    'page arguments' => array(2),
    'access callback' => TRUE,
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  $items['comportamiento_mediatico/resultado_expandido/%'] = array(
    'title' => 'Data',
    'page callback' => 'comportamiento_mediatico_resultado_expandido',
    'page arguments' => array(2),
    'access callback' => TRUE,
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  $items['comportamiento_mediatico/resultado_expandido_tab/%/%'] = array(
    'title' => 'Data',
    'page callback' => 'comportamiento_mediatico_resultado_expandido_tab',
    'page arguments' => array(2,3),
    'access callback' => TRUE,
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  $items['comportamiento_mediatico/notas/%/%'] = array(
    'title' => 'Data',
    'page callback' => 'comportamiento_mediatico_notas',
    'page arguments' => array(2,3),
    'access callback' => TRUE,
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  return $items;
}

module_load_include('inc', 'comportamiento_mediatico', 'graficos');


function generateHash(){
  $result = "";
  $charPool = '0123456789abcdefghijklmnopqrstuvwxyz';
  for($p = 0; $p<15; $p++)
    $result .= $charPool[mt_rand(0,strlen($charPool)-1)];
  return sha1(md5(sha1($result)));
}

function comportamiento_mediatico() {
  drupal_add_js(drupal_get_path('module', 'jcarousel') .'/js/jquery.jcarousel.min.js', array('weight' => 19));
  drupal_add_js('/sites/all/libraries/datatables/media/js/jquery.dataTables.min.js', array('weight' => 18));
  drupal_add_js('/sites/all/libraries/datatables/extensions/TableTools/js/dataTables.tableTools.min.js', array('weight' => 19));
  drupal_add_css('/sites/all/libraries/datatables/media/css/jquery.dataTables.css', array('group' => CSS_THEME, 'preprocess' => FALSE, 'weight' => '9999'));
  drupal_add_css('/sites/all/libraries/datatables/extensions/TableTools/css/dataTables.tableTools.css', array('group' => CSS_THEME, 'preprocess' => FALSE, 'weight' => '9999'));
  drupal_add_library ( 'system' , 'ui.tabs' );
  drupal_add_library ( 'system' , 'ui.accordion' );
  drupal_add_js(drupal_get_path('module', 'comportamiento_mediatico') . '/js/comportamiento_mediatico.js', array('weight' => 20));
  $hash = generateHash();
  $output = drupal_get_form('busqueda_form_comportamiento_mediatico_' . $hash);
  return $output;
}

function ed($message) {
  error_log($message."\n\n", 3, '/tmp/segana.log');
}
function gqs(SelectQueryInterface $query) {
  $string = (string) $query;
  $arguments = $query->arguments();

  if (!empty($arguments) && is_array($arguments)) {
    foreach ($arguments as $placeholder => &$value) {
      if (is_string($value)) {
        $value = "'$value'";
      }
    }

    $string = strtr($string, $arguments);
  }

  return str_replace(array('{','}'), array('',''), $string);
}

if (!function_exists('mb_ucfirst')) {
  function mb_ucfirst($str, $encoding = "UTF-8", $lower_str_end = false) {
    $first_letter = mb_strtoupper(mb_substr($str, 0, 1, $encoding), $encoding);
    $str_end = "";
    if ($lower_str_end) {
$str_end = mb_strtolower(mb_substr($str, 1, mb_strlen($str, $encoding), $encoding), $encoding);
    }
    else {
$str_end = mb_substr($str, 1, mb_strlen($str, $encoding), $encoding);
    }
    $str = $first_letter . $str_end;
    return $str;
  }
}

function graficos($variables){
  $inicio = microtime(TRUE);
  $tipos = tipos();
  //opciones jcarousel
  $opciones_jcarousel = array (
    'wrap' => 'both',
    'scroll' => 1,
    'itemFallbackDimension' => 1054,
  );


  // graficos lineales nota por tiempo
  if ($variables['fecha_hasta']) {

    // elemento li para el submenu graficos
    $tabs['items'][] = array('data' => l('Número de notas', '', array('fragment' => 'tab-notas', 'external' => TRUE)), 'id' => 'notas');


    // lista de graficos
    //$graficos['type'] = 'ul';
    $graficos['items'][] = grafico_lineal($variables);
    foreach ($tipos as $tipo) {
      // si tipo es 1 el grafico sería igual al gráfico general
      if (count($variables[$tipo]) != 1) {
        if ($variables['multiple_lineal']) {
          $graficos['items'][] = grafico_lineal($variables, $tipo);
        }
        if ($variables['barras_lineal']) {
          $graficos['items'][] = grafico_lineal($variables, $tipo, TRUE);
        }
      }
    }
    // si medio es 1 el grafico sería igual al gráfico general
    if (!isset($variables['medio']) || count($variables['medio']) == 0 || count($variables['medio']) > 1) {
      if ($variables['multiple_lineal']) {
        $graficos['items'][] = grafico_lineal($variables, 'medio');
      }
      if ($variables['barras_lineal']) {
        $graficos['items'][] = grafico_lineal($variables, 'medio', TRUE);
      }
    }


    $graficos['options'] = $opciones_jcarousel;


    //div correspondiente al tab
    $notas = theme('html_tag', array(
      'element' => array(
        '#tag' => 'div',
        '#attributes' => array(
          'id' => 'tab-notas',
          'class' => 'tabs'
         ),
        '#value' => theme('jcarousel', $graficos),
      ),
    ));
  }
  // fin graficos lineales nota por tiempo


  // graficos por tipo(area,tema,matriz,medio)
  foreach ($tipos as $tipo) {
    if (count($variables[$tipo]) == 0 || count($variables[$tipo]) > 1){

      // elemento li para el submenu graficos
      $tabs['items'][] = array(
          'data' => l( ($tipo == 'area' ? 'área' : $tipo) , '', array('fragment' => 'tab-' . $tipo, 'external' => TRUE)),
          'id' => $tipo
      );

      //div correspondiente al tab
      
      //lista de graficos por tipo general(area,tema, matriz, medio)
      $grafico_por_tipo['items'][] = grafico_simple($variables, $tipo);

      // graficos combinados si se ha seleccionado la opcion

      if ($variables['tipo-combinado'] != 'ninguno') {
        foreach ($tipos as $tipo2) {
          if ($tipo != $tipo2 && count($variables[$tipo2]) != 1) {
            $grafico_por_tipo['items'][] = graficos_barras($variables, $tipo, $tipo2);
          }
        }
        if ( (isset($variables['medio']) && count($variables['medio']) != 1) || !isset($variables['medio']) ) {
          $grafico_por_tipo['items'][] = graficos_barras($variables, $tipo, 'medio');
        }
        
        $grafico_por_tipo['options'] = $opciones_jcarousel;
        $grafico_por_tipo['identifier'] = 'graficos_tipo';

        $elemento_grafico_por_tipo = theme('jcarousel', $grafico_por_tipo);
      }
      else {
        $grafico_por_tipo['type'] = 'ul';
        $elemento_grafico_por_tipo = theme('item_list', $grafico_por_tipo);
      }

      ${$tipo} = theme('html_tag', array(
        'element' => array(
          '#tag' => 'div',
          '#attributes' => array(
            'id' => 'tab-' . $tipo,
            'class' => 'tabs'
            ),
          '#value' => $elemento_grafico_por_tipo,
        ),
      ));
      unset($grafico_por_tipo);
    }
  }

  if (!isset($variables['medio']) || count($variables['medio']) == 0 || count($variables['medio']) > 1){
    $tabs['items'][] = array('data' => l('medios', '', array('fragment' => 'tab-medio', 'external' => TRUE)), 'id' => 'medio');
    $tabs['type'] = 'ul';

    //lista de graficos por tipo general(area,tema, matriz, medio)
    $grafico_por_tipo['items'][] = grafico_simple($variables, 'medio');

    if ($variables['tipo-combinado'] != 'ninguno') {
      foreach ($tipos as $tipo2) {
        if (count($variables[$tipo2]) != 1) {
          $grafico_por_tipo['items'][] = graficos_barras($variables, 'medio', $tipo2);
        }
      }
      $grafico_por_tipo['identifier'] = 'activo';
    }
    else {
      $grafico_por_tipo['identifier'] = 'inactivo' ;
    }
    $grafico_por_tipo['options'] = $opciones_jcarousel;
    $elemento_grafico_por_tipo = theme('jcarousel', $grafico_por_tipo);

    

    $medio = theme('html_tag', array(
      'element' => array(
        '#tag' => 'div',
        '#attributes' => array(
          'id' => 'tab-medio',
          'class' => 'tabs'
          ),
        '#value' => $elemento_grafico_por_tipo,
      ),
    ));
  }




  $graficos = theme('html_tag', array(
    'element' => array(
      '#tag' => 'div',
      '#attributes' => array(
        'id' => 'tabs_graficos',
        'class' => 'clearfixsegana'
        ),
      '#value' => theme('item_list', $tabs) . (isset($notas) ? $notas : NULL) . (isset($area) ? $area : NULL) . (isset($tema) ? $tema : NULL) . (isset($matriz) ? $matriz : NULL) . (isset($actor) ? $actor : NULL) . (isset($medio) ? $medio : NULL),
    ),
  ));

  ed("tiempo total graficos: ". (microtime(TRUE) - $inicio));
  return $graficos;
}


/**
 * Ajax callback.
 *
 * Load remote information.
 */
function comportamiento_mediatico_resultado($variables = NULL) {
  $inicio = microtime(TRUE);
  $variables =  unserialize(descifrar(base64_url_decode($variables)));
  $tipos = tipos();
  array_push($tipos, 'medio');
  $output = NULL;
  foreach ($tipos as $tipo) {

    switch ($tipo) {
      case 'matriz':
        $plural_tipo = 'matrices';
        break;
      case 'actor':
        $plural_tipo = 'actores';
        break;
      case 'area':
        $plural_tipo = 'áreas';
        break;
      default:
        $plural_tipo = $tipo ."s";
        break;
    }

    $izquierda = theme('html_tag', array(
      'element' => array(
        '#tag' => 'div',
        '#attributes' => ( $tipo == 'area' ? array('class' => 'izquierda encabezado') : array('class' => 'izquierda', 'id' => 'blanco') ),
        '#value' => ($tipo == 'area' ? 'N° notas' : '')
      )
    ));

    $medio = theme('html_tag', array(
      'element' => array(
        '#tag' => 'div',
        '#attributes' => ( $tipo == 'area' ? array('class' => 'medio encabezado') : array('class' => 'medio', 'id' => 'blanco') ),
        '#value' => ($tipo == 'area' ? '%' : '')
      )
    ));
    $boton_expandir = theme('html_tag', array(
      'element' => array(
        '#tag' => 'span',
        '#attributes' => array('id' => $tipo, 'class' => 'expandir'),
        '#value' => ''
      )
    ));
    $derecha = theme('html_tag', array(
      'element' => array(
        '#tag' => 'div',
        '#attributes' => array('class' => 'derecha encabezado'),
        '#value' => $plural_tipo . $boton_expandir
      )
    ));
    $h3 = theme('html_tag', array(
      'element' => array(
        '#tag' => 'h3',
        '#attributes' => array('id' => $tipo, 'class' => 'resumen'),
        '#value' => $izquierda . $medio. $derecha,
      ),
    ));
    $output .= $h3;

    $query = query_por_tipo($variables, $tipo);
    $resultado = $query->execute();
    $serieX = array();
    $serieY = array();
    $serieZ = array();
    foreach ($resultado as $row) {
      $serieX[] = intval($row->nid_count);
      $serieY[] = $row->name;
      $serieZ[] = $row->tid;
    }
    $total = array_sum($serieX);

    $lista = NULL;
    $par_impar = 0;
    $activo = 0;
    foreach ($serieX as $key => $nid_count) {

      $izquierda = theme('html_tag', array(
        'element' => array(
          '#tag' => 'div',
          '#attributes' => array('class' => 'izquierda'),
          '#value' => $nid_count
        )
      ));
      $medio = theme('html_tag', array(
        'element' => array(
          '#tag' => 'div',
          '#attributes' => array('class' => 'medio'),
          '#value' => round(100 * $nid_count / $total, 2)
        )
      ));
      $derecha = theme('html_tag', array(
        'element' => array(
          '#tag' => 'div',
          '#attributes' => array('class' => 'derecha'),
          '#value' => $serieY[$key]
        )
      ));

      $lista .= theme('html_tag', array(
        'element' => array(
          '#tag' => 'span',
          '#attributes' => array('id' => $serieZ[$key], 'class' => ($par_impar++ % 2 ? 'odd' : 'even') . ($activo ? '' : ' activo')),
          '#value' => $izquierda . $medio . $derecha,
        )
      ));

      $activo++;
    }

    $valores = theme('html_tag', array(
      'element' => array(
        '#tag' => 'div',
        '#attributes' => array('id' => 'valores', 'class' => 'valores'),
        '#value' => $lista
      )
    ));


    $resumen_notas = theme('html_tag', array(
      'element' => array(
        '#tag' => 'div',
        '#attributes' => array('id' => 'resumen_notas'),
        '#value' => comportamiento_mediatico_notas($variables, $serieZ[0], $tipo, TRUE)
      )
    ));
    $contenido = theme('html_tag', array(
      'element' => array(
        '#tag' => 'div',
        '#attributes' => array('id' => 'contenido'),
        '#value' => $valores . $resumen_notas
      )
    ));
    $output .= $contenido;

  }
  $output = theme('html_tag', array(
    'element' => array(
      '#tag' => 'div',
      '#attributes' => array('id' => 'accordion'),
      '#value' => $output
    )
  ));
  print $output;
  ed("tiempo total resumen: ". (microtime(TRUE) - $inicio));
}


function cifrar($string) {
  $key = md5('dasasa121ac541654e265');
  $key = pack('H*', $key.$key);
  $iv_size = mcrypt_get_iv_size(MCRYPT_RIJNDAEL_128, MCRYPT_MODE_CBC);
  $iv = mcrypt_create_iv($iv_size, MCRYPT_RAND);
  $ciphertext = mcrypt_encrypt(MCRYPT_RIJNDAEL_128, $key, $string, MCRYPT_MODE_CBC, $iv);
  $ciphertext = $iv . $ciphertext;
  $ciphertext_base64 = base64_encode($ciphertext);
  return $ciphertext_base64;
}

function descifrar($ciphertext_base64) {
  $key = md5('dasasa121ac541654e265');
  $key = pack('H*', $key.$key);
  $iv_size = mcrypt_get_iv_size(MCRYPT_RIJNDAEL_128, MCRYPT_MODE_CBC);
  $ciphertext_dec = base64_decode($ciphertext_base64);
  $iv_dec = substr($ciphertext_dec, 0, $iv_size);
  $ciphertext_dec = substr($ciphertext_dec, $iv_size);
  $plaintext_dec = mcrypt_decrypt(MCRYPT_RIJNDAEL_128, $key, $ciphertext_dec, MCRYPT_MODE_CBC, $iv_dec);
  return $plaintext_dec;
}

function base64_url_encode($input) {
 return strtr(base64_encode($input), '+/=', '-_,');
}

function base64_url_decode($input) {
 return base64_decode(strtr($input, '-_,', '+/='));
}


function comportamiento_mediatico_notas($variables, $tid, $tipo, $return = FALSE) {
  if (empty($tipo)) {
    $term = taxonomy_term_load($tid);
    $vid = $term->vid;
    $vocabulary = taxonomy_vocabulary_load($vid);
    $tipo = $vocabulary->machine_name;

    $variables =  unserialize(descifrar(base64_url_decode($variables)));
  }
  $query = db_select('node', 'n');
  $query->join('field_data_field_fecha', 'ff', 'n.nid = ff.entity_id');

  $query = query_area($query, $variables, $tipo);
  $query = query_discursivo($query, $variables, $tipo);
  $query = query_medio($query, $variables, $tipo);
  $query = query_palabra_clave($query, $variables);

  $query
    ->fields('n', array('nid', 'title'))
    ->fields('ff', array('field_fecha_value'))
    ->condition('ff.entity_type', 'node')
    ->condition('ttd.tid', $tid)
    ->orderBy('n.nid')
    ->range(0,100);

    
  if ($variables['fecha_hasta']) {
    $query->condition('ff.field_fecha_value', $variables['fecha_desde'], '>=')
      ->condition('ff.field_fecha_value', $variables['fecha_hasta'], '<=');
  }
  else {
    $query->condition('ff.field_fecha_value', $variables['fecha_desde'], '=');
  }
  $resultado = $query->execute();
  $output = NULL;

  foreach ($resultado as $row) {
    $fecha = theme('html_tag', array(
      'element' => array(
        '#tag' => 'span',
        '#attributes' => array('class' => 'fecha'),
        '#value' => date('d-m-Y', $row->field_fecha_value)
      )
    ));
    $nota = theme('html_tag', array(
      'element' => array(
        '#tag' => 'span',
        '#attributes' => array('class' => 'nota'),
        '#value' => $row->title
      )
    ));
    $output .= l($fecha . $nota, 'notas/ver/' . $row->nid, array('html' => TRUE, 'attributes' => array('id' => 'notas', 'class' => 'colorbox-notas')));
  }
  if ($return) {
    return $output;
  }
  else {
    print $output;
  }
}


function comportamiento_mediatico_resultado_expandido($variables) {

  $tipos = tipos();
  $tipos[] = 'medio';

  foreach ($tipos as $value) {
      $tabs['items'][] = array('data' => l($value, "comportamiento_mediatico/resultado_expandido_tab/$variables/$value"), 'id' => $value);
  }
  $tabs['type'] = 'ul';

  switch ($tipo) {
    case 'matriz':
      $plural_tipo = 'matrices';
      break;
    case 'actor':
      $plural_tipo = 'actores';
      break;
    case 'area':
      $plural_tipo = 'áreas';
      break;
    default:
      $plural_tipo = $tipo ."s";
      break;
  }

  $resumen_expandido = theme('html_tag', array(
    'element' => array(
      '#tag' => 'div',
      '#attributes' => array(
        'id' => 'tabs_resumen_expandido',
        ),
      '#value' => theme('item_list', $tabs),
    ),
  ));
  print $resumen_expandido;

}

function comportamiento_mediatico_resultado_expandido_tab($variables, $tipo) {

  $inicio = microtime(TRUE);
  $variables_cifradas = $variables;
  $variables =  unserialize(descifrar(base64_url_decode($variables)));
  /// tabla para el datatable ///
  $attributes = array('id' => 'resultado_expandido', 'class' => array('resultado_expandido'));

  // Define table columns
  $header = array(
    'cantidad_notas' => array('data' => 'Cantidad de Notas', 'id' => 'cantidad_notas'),
    '%',
    ucfirst($tipo)
  );
  $rows = array();

  $query = query_por_tipo($variables, $tipo);
  $resultado = $query->execute();

  foreach ($resultado as $row) {
    $serieX[] = intval($row->nid_count);
    $serieY[] = $row->name;
    $serieZ[] = $row->tid;
  }
  $total = array_sum($serieX);

  foreach ($serieX as $key => $nid_count) {
    $rows[] = array($nid_count, round(100 * $nid_count / $total, 2), $serieY[$key]);
  }

  // render using a theme function.
  $variables = array(
    'attributes' => $attributes,
    'header' => $header,
    'rows' => $rows,
  );

  /// fin tabla

  $tab = theme('html_tag', array(
      'element' => array(
        '#tag' => 'div',
        '#attributes' => array(
          'id' => 'resumen-' . $tipo,
          ),
        '#value' => theme('table', $variables),
      ),
  ));

  ed("tiempo total expandido: ". (microtime(TRUE) - $inicio));

  print $tab;
}

?>